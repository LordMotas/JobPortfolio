/*

Project Euler #44
Problem Statement:
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
what is the value of D?

*/

#include <iostream>
#include <algorithm>
#include <vector>

int main(){
	std::vector<int> pentagonalNumbers(10000);
	int i = 0;
	long long D = 1000000000000000000;
	std::generate(pentagonalNumbers.begin(), pentagonalNumbers.end(), [&](){i++; int answer = i * (3 * i - 1) / 2; return answer; });

	//Loop through the two and add and subtract the numbers and then check to see if it matches the criteria
	for (int i = 0; i < pentagonalNumbers.size(); i++){
		for (int j = 0; j < pentagonalNumbers.size(); j++){
			long long testAddition = pentagonalNumbers[i] + pentagonalNumbers[j];
			long long testSubtraction = std::abs(pentagonalNumbers[i] - pentagonalNumbers[j]);
			//If the sum and difference of the pair are both also pentagonal numbers
			if (pentagonalNumbers.end() != std::find(pentagonalNumbers.begin(), pentagonalNumbers.end(), testAddition)){
				if (pentagonalNumbers.end() != std::find(pentagonalNumbers.begin(), pentagonalNumbers.end(), testSubtraction)){
					std::cout << "Subtraction succeeded." << std::endl;
					if (D > testSubtraction){
						D = testSubtraction;
					}
				}
			}
		}
	}

	std::cout << "The answer is: " << D << std::endl;
	system("Pause");
	return 0;
}