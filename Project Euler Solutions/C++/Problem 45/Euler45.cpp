/*

Project Euler #45
Problem Statement:
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <iomanip>

int main(){
	std::vector<double> triangleNumbers(55385);
	std::vector<double> pentagonalNumbers(31977);
	std::vector<double> hexagonalNumbers(27693);
	double i = 0.0, j = 0.0, k = 0.0;
	std::generate(triangleNumbers.begin(), triangleNumbers.end(), [&](){i++; double answer = (i * (i + 1.0) / 4.0); return answer; });
	std::generate(pentagonalNumbers.begin(), pentagonalNumbers.end(), [&](){j++; double answer = j * (3.0 * j - 1.0) / 4.0; return answer; });
	std::generate(hexagonalNumbers.begin(), hexagonalNumbers.end(), [&](){k++; double answer = k * (2.0 * k - 1.0) / 2.0; return answer; });

	//Loop through the triangle numbers and find the same thing in the other two vectors
	for (int i = 285; i < 55385; i++){
		double test = triangleNumbers[i];
		if (pentagonalNumbers.end() != std::find(pentagonalNumbers.begin(), pentagonalNumbers.end(), test) &&
			hexagonalNumbers.end() != std::find(hexagonalNumbers.begin(), hexagonalNumbers.end(), test)){
				std::cout << "The answer is: " << std::fixed << std::setprecision(2) << (int)(triangleNumbers[i] * 2) << std::endl;
				system("Pause");
				return 0;
		}
	}
}