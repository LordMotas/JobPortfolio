--Project Euler #12
--The sequence of triangle numbers is generated by adding the natural numbers. 
--So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
--The first ten terms would be:
--1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--Let us list the factors of the first seven triangle numbers:

-- 1: 1
-- 3: 1,3
-- 6: 1,2,3,6
--10: 1,2,5,10
--15: 1,3,5,15
--21: 1,3,7,21
--28: 1,2,4,7,14,28

--We can see that 28 is the first triangle number to have over five divisors.
--What is the value of the first triangle number to have over five hundred divisors?


with Ada.Text_IO; use Ada.Text_IO;
with Ada.Numerics.Elementary_Functions; use Ada.Numerics.Elementary_Functions;

procedure Euler12 is

  package IO renames Ada.Text_IO;
  package Math renames Ada.Numerics.Elementary_Functions;

  --Variable declarations
  answer : Integer := 0;
  triangleNumber : Integer := 0;
  Nod, Sqrt : Integer;

  function NumDivisors(Number : Integer) return Integer is
  begin
    Nod := 0;
    Sqrt := Integer(Math.Sqrt(Float(Number)));

    for I in 1 .. Sqrt loop
      if Number mod I = 0 then
        Nod := Nod + 2;
      end if;
    end loop;

    --Correction if the number is a perfect square
    if Sqrt * Sqrt = Number then
      Nod := Nod - 1;
    end if;

    return Nod;

  end Numdivisors;
  
begin

  for I in 1 .. 100000 loop
    triangleNumber := triangleNumber + I;
    if NumDivisors(triangleNumber) > 500 then
      answer := triangleNumber;
      goto endProgram;
    end if;
  end loop;  

<<endProgram>>

  IO.Put_Line("The answer is: " & Integer'Image(answer));

end Euler12;
