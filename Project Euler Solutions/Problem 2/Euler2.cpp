/*
  Project Euler #2
  Problem Statement:

  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
	By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed 
	four million, find the sum of the even-valued terms.

*/


#include <iostream>
#include <vector>
#include <algorithm>

long long
FibonacciElement(long long n)
{
	if (n == 0) return 0;
	if (n == 1) return 1;
	return FibonacciElement(n - 2) + FibonacciElement(n - 1);
}

int main(){

	auto i = 0;
	auto answer = 0;
	std::vector<int> fibSeq(34);

	std::generate(fibSeq.begin(), fibSeq.end(), [&](){return FibonacciElement(i++); });

	auto j = 0;
	auto total = 0;
	for (int j = 0; j < 34; j++){
		//std::cout << fibSeq[j] << std::endl;
		if (fibSeq[j] % 2 == 0){
			total += fibSeq[j];
		}
	}

	std::cout << "Total Sum of all even numbers below 4 million is: " << total << std::endl;

	system("Pause");
	return 0;
}